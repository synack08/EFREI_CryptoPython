name: Industrialisation continue sur AlwaysData

on: [push]                             # ou on: push: { branches: [ main ] }

env:
  HOST: "ssh-${{ secrets.USERNAME }}.alwaysdata.net"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 0) R√©cup√©rer le d√©p√¥t localement pour conna√Ætre son nom
      - uses: actions/checkout@v4

      # 1) Copie / mise √† jour du code sur le serveur
      - name: D√©ploiement via SSH
        uses: appleboy/ssh-action@master
        with:
          host:   ${{ env.HOST }}
          port:   22
          username: ${{ secrets.USERNAME }}
          key:   ${{ secrets.SSH_KEY }}        # ‚Üê la cl√© stock√©e en secret
          script: |
            set -e
            cd $HOME/www

            repo_name=$(basename "${GITHUB_REPOSITORY}")
            if [ ! -d "$repo_name" ]; then
              git clone https://github.com/${GITHUB_REPOSITORY}.git
            fi

            cd "$repo_name"
            git pull origin ${{ github.ref_name }}

            # si votre appli est dans un sous-dossier flask/, adaptez :
            # rsync -r ./flask/ ../flask

            echo "üéâ Code √† jour sur AlwaysData"

      # 2) Relancer le site AlwaysData via leur API
      - name: Restart AlwaysData site
        run: |
          set -e
          code=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST --user "${{ secrets.ALWAYSDATA_TOKEN }}:" \
            "https://api.alwaysdata.com/v1/site/${{ secrets.ALWAYSDATA_SITE_ID }}/restart/")
          case "$code" in
            204) echo "‚úÖ Site relanc√©" ;;
            401) echo "‚ùå TOKEN invalide" && exit 1 ;;
            404) echo "‚ùå SITE_ID invalide" && exit 1 ;;
            *)   echo "‚ùå Erreur API (code $code)" && exit 1 ;;
          esac
